name: Security Audit

on:
  # Run on push to main branch
  push:
    branches: [ main ]
  # Run on pull requests
  pull_request:
    branches: [ main ]
  # Run weekly on Mondays at 9 AM UTC
  schedule:
    - cron: '0 9 * * 1'
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --frozen-lockfile
          npm --prefix=backend ci --frozen-lockfile

      - name: Run npm audit for frontend
        run: |
          echo "=== Frontend Security Audit ==="
          npm audit --audit-level moderate --json > frontend-audit.json || true
          npm audit --audit-level moderate || echo "Frontend audit completed"

      - name: Run npm audit for backend
        run: |
          echo "=== Backend Security Audit ==="
          npm --prefix=backend audit --audit-level moderate --json > backend-audit.json || true
          npm --prefix=backend audit --audit-level moderate || echo "Backend audit completed"

      - name: Check for outdated packages
        run: |
          echo "=== Outdated Package Check ==="
          echo "Frontend outdated packages:"
          npm outdated --json > frontend-outdated.json || true
          npm outdated || echo "Frontend outdated check completed"
          
          echo "Backend outdated packages:"
          npm --prefix=backend outdated --json > backend-outdated.json || true
          npm --prefix=backend outdated || echo "Backend outdated check completed"

      - name: Generate security report
        run: |
          echo "=== Security Report Summary ===" > security-report.txt
          echo "Generated on: $(date)" >> security-report.txt
          echo "" >> security-report.txt
          
          echo "Frontend vulnerabilities:" >> security-report.txt
          if [ -f frontend-audit.json ]; then
            jq -r '.vulnerabilities | keys[]' frontend-audit.json 2>/dev/null | head -10 >> security-report.txt || echo "No frontend vulnerabilities found" >> security-report.txt
          fi
          echo "" >> security-report.txt
          
          echo "Backend vulnerabilities:" >> security-report.txt
          if [ -f backend-audit.json ]; then
            jq -r '.vulnerabilities | keys[]' backend-audit.json 2>/dev/null | head -10 >> security-report.txt || echo "No backend vulnerabilities found" >> security-report.txt
          fi
          echo "" >> security-report.txt
          
          echo "Frontend outdated packages:" >> security-report.txt
          if [ -f frontend-outdated.json ]; then
            jq -r 'to_entries[] | "\(.key): current \(.value.current) -> wanted \(.value.wanted)"' frontend-outdated.json 2>/dev/null | head -10 >> security-report.txt || echo "No frontend outdated packages" >> security-report.txt
          fi
          echo "" >> security-report.txt
          
          echo "Backend outdated packages:" >> security-report.txt
          if [ -f backend-outdated.json ]; then
            jq -r 'to_entries[] | "\(.key): current \(.value.current) -> wanted \(.value.wanted)"' backend-outdated.json 2>/dev/null | head -10 >> security-report.txt || echo "No backend outdated packages" >> security-report.txt
          fi
          
          cat security-report.txt

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            frontend-audit.json
            backend-audit.json
            frontend-outdated.json
            backend-outdated.json
            security-report.txt
          retention-days: 30

      - name: Fail on high/critical vulnerabilities
        run: |
          echo "=== Checking for high/critical vulnerabilities ==="
          
          # This step will fail the workflow if high or critical vulnerabilities are found
          npm audit --audit-level high
          npm --prefix=backend audit --audit-level high
          
          echo "âœ… No high or critical vulnerabilities found"

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC, 0BSD